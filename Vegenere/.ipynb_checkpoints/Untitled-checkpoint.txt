{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Possible Key Length:\n",
      "[3, 5, 7, 9]\n",
      "D U V A Z S I F O C N V O C H H K N A U H U Q S L K Z L W A V M N D Q P T L E V P N L G X S N H L L K L T V X J X Z S T Q G J E H T A Q F E F Z T Y G H R X Q U V A Z N P L M K N H H L M O C X D J X O G L Y P U W V N O Y H Z P F D A D W N K C Z L Q U Y T H K B Q F N C M G G H N W W E U D R H Y P F Z H E V C H H N E J U U D D L L B R F E V J F I K U G Q G J B P B X T Y T K K G R V L V N U R E V U N T L C S U T D R C G J DUVAZSIFOCNVOCHHKNAUHUQSLKZLWAVMNDQPTLEVPNLGXSNHLLKLTVXJXZSTQGJEHTAQFEFZTYGHRXQUVAZNPLMKNHHLMOCXDJXOGLYPUWVNOYHZPFDADWNKCZLQUYTHKBQFNCMGGHNWWEUDRHYPFZHEVCHHNEJUUDDLLBRFEVJFIKUGQGJBPBXTYTKKGRVLVNUREVUNTLCSUTDRCGJ\n",
      "Z T I H H E Y D J V H Y H J Y X V K K T L A L Q S Q T K L U K U L Q X P J D U Z I B T F W N H H X Z M T H F X E G V A D Y Q P Z S H H A S T H T H A X V W Y Y S V Y R H T C C H R K D K B H J P W H C S T J B V F M U Q I B N I P J Y Z X D R Y X F G Y E G C G Y V Z P N W G C U Z X U W T W P Z E M V H L J D U V T H B Y L J X V Y I N K O P J H T J D P W U G Z Q V G E M T B L J O G Z E C N L M S L P M S N G A B H E F W D X R ZTIHHEYDJVHYHJYXVKKTLALQSQTKLUKULQXPJDUZIBTFWNHHXZMTHFXEGVADYQPZSHHASTHTHAXVWYYSVYRHTCCHRKDKBHJPWHCSTJBVFMUQIBNIPJYZXDRYXFGYEGCGYVZPNWGCUZXUWTWPZEMVHLJDUVTHBYLJXVYINKOPJHTJDPWUGZQVGEMTBLJOGZECNLMSLPMSNGABHEFWDXR\n",
      "H D N L E H C X H W Z D O M S R W E R Z L I F H E Y Q C D N Y F A Y Q W Q J N Y H L L J O W V D G Y Y L X D N V I I X A F N G O R G X T Z L Y L Q N I W K S F M W K J T N X H Y G Q U I E O M L Z K U K C H H V V C J P F V H B G Y G M H P Z S W L A R T F G J L B M I L R D C G W H X M L W V U O Y Z M K Q S L P J S N H P C U G G N E H X I Q W H T O E N M C A J U C H T S L Z J Y D U Z N L G U K W F G V E V L U C T H Q Z C W HDNLEHCXHWZDOMSRWERZLIFHEYQCDNYFAYQWQJNYHLLJOWVDGYYLXDNVIIXAFNGORGXTZLYLQNIWKSFMWKJTNXHYGQUIEOMLZKUKCHHVVCJPFVHBGYGMHPZSWLARTFGJLBMILRDCGWHXMLWVUOYZMKQSLPJSNHPCUGGNEHXIQWHTOENMCAJUCHTSLZJYDUZNLGUKWFGVEVLUCTHQZCW\n",
      "R Q O T Q G U M R V G B S N W H C Q U N Y U C V A C R Q O B S U K Y B K Q H O N H X Z L F J V D I L X H R Y X V N N U H Y A N L K Z E N X K M S V E J R I T L C W D O C I L M B Y L E Q B S J F V M G G G Z G Y M Z J J L E Z E A X V C Q J G O A N B P R F E H Z O I H A M Q Q C J E W H Z Y T W Y H U M M Y Q L W H O U O Y D N N F J Y E L H L C X W Q N U I X A U J F F V A Y M K M X W K F C X X L A J I N W E C X Z L X Q U V L RQOTQGUMRVGBSNWHCQUNYUCVACRQOBSUKYBKQHONHXZLFJVDILXHRYXVNNUHYANLKZENXKMSVEJRITLCWDOCILMBYLEQBSJFVMGGGZGYMZJJLEZEAXVCQJGOANBPRFEHZOIHAMQQCJEWHZYTWYHUMMYQLWHOUOYDNNFJYELHLCXWQNUIXAUJFFVAYMKMXWKFCXXLAJINWECXZLXQUVL\n",
      "W Q T J A X V U Y J Q T Z R Y M Z C T B I N S W H Y C J D G O I I X H M J W J D D G U A R L F Q N O M G K G I O U O B N H J M X W H A I M B S R U D Z P D S T Y Y Y W G J T Q L S U J Z T Z L I G Y M J D T O S I B L A T N C M N M G U W H R T M O H L O W Z Z C A R H H Z R F W Q M E L X A K X R D I U B H A L F F Q I N N A S C F D C Y W H J K R M E V M L X L F C N H V G C I B I C X W U Z I H G B Q T W G D N N H K C I L T Z WQTJAXVUYJQTZRYMZCTBINSWHYCJDGOIIXHMJWJDDGUARLFQNOMGKGIOUOBNHJMXWHAIMBSRUDZPDSTYYYWGJTQLSUJZTZLIGYMJDTOSIBLATNCMNMGUWHRTMOHLOWZZCARHHZRFWQMELXAKXRDIUBHALFFQINNASCFDCYWHJKRMEVMLXLFCNHVGCIBICXWUZIHGBQTWGDNNHKCILTZ\n",
      "C N L I M I C X Q Q M H G J F C I M V T U G N O N Z U J Y G C I P U V Y R T U E D I O V P C F A U H T X X V G F L T J A J T E Q M U Q J C I B O F W L G P E N X W G M U P N H Y P O R S H G V V C F U D Y H J N S M T H V N W G J P I T N Y W H D M P M M H P T V V Z B N I O A N G C N C K B L R W L I M E I H P K F U F Y H C B Z W W Q C V C O U Z C J H P J P Q H Z L K L U V R H X K A M R U I V N F T P J W P F S Z B L G S E CNLIMICXQQMHGJFCIMVTUGNONZUJYGCIPUVYRTUEDIOVPCFAUHTXXVGFLTJAJTEQMUQJCIBOFWLGPENXWGMUPNHYPORSHGVVCFUDYHJNSMTHVNWGJPITNYWHDMPMMHPTVVZBNIOANGCNCKBLRWLIMEIHPKFUFYHCBZWWQCVCOUZCJHPJPQHZLKLUVRHXKAMRUIVNFTPJWPFSZBLGSE\n",
      "Z Q G O O N T I H V Y J I R J O I H P D J J K M H I M V C J W N D S W N O R T F Q N T U H Z P N L F V F A G U L T L W G O L B P Y T U P V X H X L Z I V E M M N L V C F F V D S U B A Y J I P Z N I W Y K I H Q T B M K P L R G T D N W K U D R R K G U B G U M J K F V H B H J M N O U V U I Y O I T L T O T L Y V P N H G Z C Y T Z T I Q A V E S B D F I H P M I O K N M T R T Z S L Y H C W G I D A M T L P B J U J C I V V I T ZQGOONTIHVYJIRJOIHPDJJKMHIMVCJWNDSWNORTFQNTUHZPNLFVFAGULTLWGOLBPYTUPVXHXLZIVEMMNLVCFFVDSUBAYJIPZNIWYKIHQTBMKPLRGTDNWKUDRRKGUBGUMJKFVHBHJMNOUVUIYOITLTOTLYVPNHGZCYTZTIQAVESBDFIHPMIOKNMTRTZSLYHCWGIDAMTLPBJUJCIVVIT\n",
      "M H S T L Q Z F L Y U L K L T I N L F D C F R F Z V U G J D N B E X O J B H N F A U M L H M I B T H V J R Y Z K L G W C B B X H Y K J F T D G U K V C N H K J H L G Z B T R E B R W X Z L K W E O F C H V S U I P P E V W A M Z P T G T I T V M S Q C Z E X B K K N F E Z E O N U Q Q D T Z N I X V R Y R T N E C N I L W Y V C D H H L Z T F P N F M H H Y I J Q O N Y M Y L H E U J E I G Y Q J X T G T N L U C S D W V X U Q H L MHSTLQZFLYULKLTINLFDCFRFZVUGJDNBEXOJBHNFAUMLHMIBTHVJRYZKLGWCBBXHYKJFTDGUKVCNHKJHLGZBTREBRWXZLKWEOFCHVSUIPPEVWAMZPTGTITVMSQCZEXBKKNFEZEONUQQDTZNIXVRYRTNECNILWYVCDHHLZTFPNFMHHYIJQONYMYLHEUJEIGYQJXTGTNLUCSDWVXUQHL\n",
      "U V A Z S I F O C N V O C H H K N A U H U Q S L K Z L W A V M N D Q P T L E V P N L G X S N H L L K L T V X J X Z S T Q G J E H T A Q F E F Z T Y G H R X Q U V A Z N P L M K N H H L M O C X D J X O G L Y P U W V N O Y H Z P F D A D W N K C Z L Q U Y T H K B Q F N C M G G H N W W E U D R H Y P F Z H E V C H H N E J U U D D L L B R F E V J F I K U G Q G J B P B X T Y T K K G R V L V N U R E V U N T L C S U T D R C G J UVAZSIFOCNVOCHHKNAUHUQSLKZLWAVMNDQPTLEVPNLGXSNHLLKLTVXJXZSTQGJEHTAQFEFZTYGHRXQUVAZNPLMKNHHLMOCXDJXOGLYPUWVNOYHZPFDADWNKCZLQUYTHKBQFNCMGGHNWWEUDRHYPFZHEVCHHNEJUUDDLLBRFEVJFIKUGQGJBPBXTYTKKGRVLVNUREVUNTLCSUTDRCGJ\n",
      "Ciphers: \n",
      "[[6, 4, 8, 9, 8, 8, 10, 15, 2, 7, 9, 15, 4, 14, 5, 7, 8, 6, 5, 10, 13, 12, 5, 7, 6, 8], [5, 7, 6, 8, 7, 5, 9, 19, 5, 11, 7, 9, 6, 6, 2, 9, 6, 4, 7, 13, 8, 11, 8, 10, 13, 10], [4, 2, 10, 7, 7, 7, 12, 16, 7, 8, 6, 16, 8, 11, 6, 4, 8, 5, 6, 6, 8, 8, 12, 7, 11, 9], [8, 6, 10, 3, 9, 7, 7, 11, 6, 10, 6, 13, 10, 12, 8, 1, 12, 6, 4, 3, 10, 9, 8, 12, 12, 8], [8, 7, 10, 9, 2, 6, 10, 13, 13, 10, 4, 10, 12, 10, 7, 1, 7, 8, 6, 11, 8, 3, 11, 7, 8, 10], [4, 5, 13, 3, 5, 9, 10, 13, 11, 10, 4, 8, 11, 12, 6, 13, 6, 5, 4, 9, 12, 12, 8, 5, 6, 6], [4, 7, 5, 7, 2, 7, 8, 11, 16, 10, 7, 11, 10, 11, 9, 9, 4, 6, 4, 16, 10, 13, 6, 2, 8, 7], [2, 8, 8, 6, 10, 10, 7, 14, 8, 8, 8, 14, 7, 12, 4, 4, 7, 6, 4, 13, 9, 9, 6, 7, 9, 10], [6, 4, 8, 8, 8, 8, 10, 15, 2, 7, 9, 15, 4, 14, 5, 7, 8, 6, 5, 10, 13, 12, 5, 7, 6, 8]]\n",
      "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n",
      "[(15, 11), (15, 7), (14, 13), (13, 20), (12, 21), (10, 19), (10, 6), (9, 10), (9, 3), (8, 25), (8, 16), (8, 5), (8, 4), (8, 2), (7, 23), (7, 15), (7, 9), (6, 24), (6, 17), (6, 0), (5, 22), (5, 18), (5, 14), (4, 12), (4, 1), (2, 8)]\n"
     ]
    }
   ],
   "source": [
    "from scipy.signal import find_peaks\n",
    "from peakutils.peak import indexes\n",
    "import matplotlib as plt\n",
    "# a=\"FBHJLZINOHBYTYCNCZLUYZUFIGDMZMYKVQDSPUEFJIGJPOQUFQDRJQJNTVDREXXJEOQGDUUWFWGOXQQHKJLUWFDYCMFRZTUIKVHHZPATEHKKLHUTWRLTZTQZIGEOCEIFISWNPPDQPAHSMFHXFTWNPEYSFTDSTMOYISHZSBJXLFYOGFTYYSRXOFQQRBGZSFEUVBQONIUXCSIZMFXNERJGGFJMVADTOPKWVOURJNQRDOOGYDUXKCUYEIUNIHLSPJDYYSHIZMELZQDRDQEYCWJNECKYNVDZTGSFCOPOEZXFUBWHPGQQCSQZSFTNECVGFSIBFIOJEIUDJHLRWIQAVURTPPKYECWCTUXFSOQMMVJFNVLSAFHRRMEKYPJFTQRXOJDLKCDTPXIYLRBZSBJXRMVJTOEXRIUYDUYQCVDJAMUSKMRLGJCFERYORPHQVOGOYHKUKCWNPNQXJSAZTOSYZCQGEUXJVBGUQUXJTFHZLDUTLGSKCJEIISYKLMUILGLTRIKLVGLSFMQYZCQYEIQYRFHTPXJTGOOKZOJTCCJEEIUKZBGOYHCFIYVZSFBFKSVZEVHSZBDJPCQYVCYKCXXJKVHXOJDTJOXXDXUWVOOXPBTDZBWKCNYSRZGKNMYSVPBZSFJNDSGUZNIIRMVZCVSPZBDJOJJNFBWNPTJZUMVIFUJNEUHJRFQUGFRGNISTLZGNPMFZJPHZEFHQFCNHLDAFKDDYEFDAZFRTXFDYRZWACNENCOQJWFQWEWQLTOUWUSWGTMMMRHZKXJWMKSAVPDJKICPSZEUWEQOOXBJJTVDTRFVTIAHGYEVTIOOUEPVUVCSRPUXFKKLYSUXNJHKKEFQRYOVKYEUIWCUSPBTJTWVOZOCFUSLZDFURVRDYTGXJYOGHPFDUCOBOYHMNKVXYLMBMZGOOQFYKVSOYZSHDWCUZSPIJNVRCLOJYFQRSAFJJWCUSPTINJHKXZOUNKGLSAPIXZPOKEIYXBWGODVDNHIHSPTINZGDTLMYJEHKGEEUIZQDZPTXNDGHRQUEUCOBOYHMNKVKAXBDXZVDBPGKSCWNKLDXNCRLTEIUXKFHKEXXJEHKKOBOHFAHYHIUSZAQUEFDOFMLTRJJNNWORWFQAVTRUECQQCAHYDJYXKVHHPTJUCOBKCJDYYSZUCMTGPGRSPEYXKOQIPIUXCWNKLQBFPGWGEJESYSFGYUQPVOGBLOJFXSRLPWUWPALYEBAJNSPGVFJMRHLYXFQSUAHYDJMJISUORIJZGHKKCFQGJCOAEFBDCSWSPFCGIOFKEIUJJCXXLELJIGLZJGEWNWVKXFDXRMLZTTJMVKLYPTJHFIUYPJWSFFDTNFYXKVHIFSIJFTJUOLDTNZHJRFYXKVHCTOWBYSUKHJJMNSIRJUEMVOYKYUXNJZLLPXXNTVKGOCUJEHKKEPCGFTKODWYWKIHGYEEKYWVNZOEZIWVHFUQBRZNOYHIMRRRCLQETIDOGJFHYYOWYESKYJOQJQSUYJVLYSPKWLDRTEIUXKOJKLOTYYSQODIUFIRQUXPHJZHLYLUQQVHRROCOFEWGOZUVZCZRLDPKSUOQJQVHDJWJTTGONEUQUEIYSXOIZPSJMVPLMMBDLZHZGDDEQUOQJMMQHBOQJEIUSKVHXPXQXCWJNEOEBWCUZSFVNIGWZTNUFJHUUYPCJIGKGGFWQZASYPEJMRHGGHOEKKVHAYJLJIGHZSJHYVSQHTMBNFBBKLSIFXCZNPOJMVSDXWJUXKGWGCTMJISWACOYSXCQZSFBNXVWOYUXJTCVSTDTFIYQKDTQSUWIZSBJNJBRZPOEZXVWNPZCFPVDBPEUYVQWKONOXKSUOZVIIRFNSLUJJIOWCZSAYFCWNPHBNDDVKNPDXZGWKOPVFWOLTESQIZCVOROQQWFRSOFUUJDDIPQYHBSGAACOFEOQZPODFKVDZTTIQZUKZWZRNXUHXEIQSRFHLCJWJIOWUCBDITCVZDMUXJHKGYGYAVALRWJESSIWOYDUWKOLTHBOXTOQMZCQHBAXISGQWKVHXTOJNDSDTOEYXKOQIPUXFEHKKNFBJSFDZPECZCHLHTMBNFBGUWMQWYIEHWFIURQHZPMUXTCSKUVTISCZSLOEKRFLFZOQXKOWKFOYAVFVOEZBJRRDAEIEWFTDYEVTDZBMUFSDFCBDZFSUXRWGZSFINXBDRNBCJWFRSEIUAVFBLTSIYFPMKNUINEHKKFOYAVFVKLTYYNOVKXFHLZBJUFUEKUOUQYFIXKKRNFOTWVRPOWMYTEMHGCTQKKSUZSFRNXPDTRTUJZBJZSFKSZJHXDFZZJHOORIJNEUXVPWUSKVRARIYYNOVUYMOFWOLTETYLEOOODFLJEARXPJCUFFWGYUJMRBWNPCYLSOQMMFSFLGHCPBHJDOGKZGIYRFVZFGVFERVUHFQWVUOOXQINEUDZZVHTIWJOYTQNUOVZCPDTDSUXTDXFIRHRWJIBYCZGDOEYZBYUWWUIZBWNPQHTASFZEIUXZUQGWTXTNSGAYFNUVQWKOMOHFZGZPNFJIOWACFIFERDTFOKXLOORJQHTECXTNFTBRJHCSFDFJHUUYPCJIGWXTFTYFTLMFSUTLHZNJUXJSSVZPYFQRBDZTPDBRGWNLUUQLGLBPEQWBADZEFHRRMKGGFRJVBDZHPHPZTYKCJVNVRWNLUMTLZGHPUXJWWUYEDESWWUSLUYTECIOETANERRLOBHPDOWZPSMMZQKODBIZSGWGYUYFCDDXEPVYYSXTTWUWJSWNLUIHZSQZTTJXYOYKMFUSJSDXNIYSXTRXZWUWUSFGOFINWQRTQJHRVRWNTTTNJQRBPSOIVGHXGFIYNCQUMFBUIWCKDGEWSCWNNBFYLFLTRUXJJWJTLMEKKVHLTSIYJHDXDBDIGCWKYUYFCRDXVNQYKSUIZOVNIADZTPDXRWGNLSLFIRDYESESFAHXLWYQFSECSPMFJBRZABHYFTWNPSUXVOUISUUFDQDAEJESZBJZSBJJOHUGZSTNEOUENMQNDGUKBVYWVSAZCBEWUWQGCZUAZRHTNFXJJOLJTOTJGSQJPOJYVGWYLSUSVSGKOUEAVFLLJUXJWWQJTOWXSCZSLOQLISHJTOTJGSQJPOJYVGWYLSUSVSGKOFLJEHKUFHXMZGWKLNIUVBWZHPOJRFVJZVRQVOQJESYUCSFNPDANEUWNPJHBFFNOEJIFKWPKZGJMVIQOGFHXVKHXPBBQPRRTZUASFKDTJUXNEUDHZVJGFKPGYTQNUVHYLJTYYSGODDEAVFBODMYPVHKKQJHXKGHTEFDHVWQGYFQWCMFNLQJJICIZSFXNJHRXJPVYYSFUDNEXKVLYTTDTKVLTRUXFKOVZCPDTDSUYNPKQUOFZFBBQPGHKTOVFTHLZTTQQCWQJTSUHKPDYPEESTVDTRFINEHKKHBLJCSQMEIIUICGANFTGPFDJTPINXBDRDUXJVOURJVDNMSUYPXQXUOUQLOTHFZGLTMBJUKLZSKKXKVBJCPWJEOQJSFBNLARTNFIYRFVLZSCJUHKKJFCNKHHJFMJWRJLUWFJQZUKZTOJTKVHJLSAFISDYMFJBVSQZSFCYYOWAWUHFMWRRPUBNXVWISBDLVGWNPFDJIUBYTHDFKIUKZGXDUFRMPOQYFAVHZXCFEGDOOBIYICQUXFHXCCRQPEQYRGSKNJVNTKDBPMUSXHKOQUXJISZKCFIYRFVGYEKQKFDBTPBJKZLMSUJMVMZUFMTXVSRTPTYLEOWACFYKKVHXPXUWVBRYEBHXKVHEHPKQUGHKLOEYYSUZSFOXRKDIWFQWSIWLLJDYJWJTLMIMFKLTRUXJISZKCFIYRFVVCPRFSZBSLOOTWHKKXCEBDOQYLJTKZBGOYHJMRHWXLDUXZUQGWXQXECWKLTOGVQDADFJMVALRVZMFPUDRLYOFCCQKMPERJKLZSSQIZCZGGFDTZGHZPOJMFIVGYEJNDSVRZVTJIGDOOQUYVFNACDPDEGNOLELFEQHJASELIOPZPDXSFZRMJEYWVQWUCGEWKVHTLUYTEOOYNJUSTSIUFOTFKWRTHIYHYVHRAFTKLBGZSFHJJSDXNIVNERLTRUXJZASGNUEKKVHLTSIYJHDXDJDYYOWILDEUYCQEHPKQUPHRTLUYIMLTRUEMVOUZSFVQRDRLLIKRDWQMMJHIJKLTRGHTDWQYTEUFYIUXTDQSVYXXNAOSJYLYLJTNEOQTDGLNUSRHPDQZJSWNPIYLYSQJZGJMVTUKBVUSTMWNPZMJISOUZLYSXWQODUXJJOPKLTVRIOGOZUXJRGWXZOERVFVNLEJTXCWUEIUFLGWXLMYFERHYPSJYFSVILQUNEHHXQFHJEQHZSBJBRGZNPSUYYSBOYTJFCZHJEIUNIOQZPODFJHKKJUXJEZDHZSUIKCFUYGYWDKKGEUXJPTRAYEYSGOUZMZJJJHLTRJJFXOLTDUTZDABYTHDFCGLTEIUQRPDTOJJFCZVNZXUIKVDZHIQYKVHEDQEYKSGCLTJMVSAODUUSTSRLEIUKZFVZDUQWJPRCXBDXRWG\"\n",
    "a=\"DZHRWCZMUTDQQNQHVINOTLGSAHLTJIOTZHEQAMOLSEHGXINQIYCUVCTZFDXMUXIFOJHRYQHLCVWVJQVYNHZGQMYUVYDBTHJLOHOSZGIKCJMNRJRLHYSWYFJTHXRHMCOIKVWCZIINNKEQCMHLAKRUTVPFUTZNBTDDHLLYIUJCUAIUNGJFQLFCSNKRSQHVWOMFLSEAHNHZKQYCYZIVZTQRCUMULKCQJJVGWLDODYCJAUNBGGJDVKYSOCWNMUFUIINBNLAKIPDEDQYYXUSXQXQBHVWOPPWKMYNJTJQQJROBLDJHWTRHEUNOJUTNVZYNDEFFPIHHDDQANBLXGINULTLZUOTMGFJLAVULXWOFRPHHSNWJLCZMNHVVFFPIHHDDQANBLXGINULTLZYLOHFHKMYXMTVVLTLHGXFJTHXRKXARVFDYGVGYXXNXIGUZJEVVOFLKXGINULTLZVINOTLGSAXUBJWWTDAHNAGCQYFYHJOBGQNAJTLBJPGNMEBXEZOLXQPHHSRKWMYYTHGZHUTKAHXEAQUJQATNIJPFFSZXMCVTETLKBIXDFHYMSBHGZTLSROXUTHQVUFLKYANEDWZVGXIJZLICHVWRPGVNRWKIDPEHXYSTSEMKQYFLTNMJUSMCYXNHVVWWYWLLAYKDYGVGZRJOWMCZNHTCGUFBPTNIJPFTLCXLTNVRMCHMQHDEKHYBLYSBNRGYSPURHKQLUOBWHDUEJRAXLKIQZSYZMBEBTHJLOHOSZGIKCJMJLVPWXPLFIVZEDWZVGCNOJHKMYFIFXCUGMUWCOSKGJDYHGTCGDYKVLJHZTHISYBHGOJHUPVVYSNQIUFVMISTPWMCZBMBPVUJJLTMENQPJAHKVOIFLTVPWYBVENNLAHNHZCWRMZIBEMGGZPPGANJTPFJYXMPDTDYGVGINGAZMCUTWTDXHQWNKIWDPJHYUTNRZGRWDVKYSOTHRMCXWAMDRSZFLNOMKQLGABHPGCQYRPLMUZUETROMBEYGFFWHGXTCGEZPUBHGJHZTMKKYLZCVJKBVBOAVKNQZMIRZFFFPIHHBVENNLAHNHZCWRMZIBEMGDQROHOGCCQFAJNGUGCWNMUHZWJQGNQNXHEMCOQWUXWENUDWWMHLCVTETLZXKUZUWWYABINDPVTKLYIRZUWXROXHEOYRWIVYMYHDLTRPVZUIILYFHMMUMTRZLKMBEOTHJQYHITNEDSQAHLEVULLLPYCCVPWFKVNHTJHFFPIHHSOQUNLNBNUIFHWEYHONYGYJLPYNHZVUJCDACCCUXUNSBYDDVGNCZTHDYGFFWZHLINJDWTLLNEYCQIZBKHEYCQTROXLWVAFFPIHHCVPEJQLJOENVHWCKUSFJTHXRZBMFJTWMCDHIDOQEJFHKPENVHIYUWNUMPHIGUMILJPJQGCXXPMQGZAALQIOJQJUFHONBVUJCZKYPGCFNLNMBEHFHKMYXMTVVLTLTTSAGURHYBLYCVTETLZMIRZUKJJKBHSJKOYMIXLEGGDXCKYIRZUWXAHGVEZKWMCYLCNFURWQVNLCZUGJNLGXIIIXUMUXHVDTRSKLGNAGELWABFMTVPFJQTTNUMGITPLLNSVNWJPUTNEWGWBCLGVEDPJSCALCNFUDSBUXNSJWUHCZHZCVTETLKBIXDFHXCLVURWQQIGVQCDZULSIHGXCVTETLJRWLZ\"\n",
    "b=a\n",
    "#length\n",
    "freq = []\n",
    "for i in range(0,len(a)-1):\n",
    "    b=\" \"+b[:-1]\n",
    "    c=0\n",
    "    for j in range(i,len(a)):\n",
    "        if b[j] == a[j]:\n",
    "            c+=1\n",
    "    freq.append(c)\n",
    "    # print(c)\n",
    "peaks = indexes(freq)\n",
    "possible_keys = []\n",
    "for i in range(1,5):\n",
    "    possible_keys.append(peaks[i] - peaks[0])\n",
    "print(\"Possible Key Length:\")\n",
    "print(possible_keys)\n",
    "# key = input(\"Select a Key: \")\n",
    "# print(peaks)\n",
    "# print(freq)\n",
    "key = 9\n",
    "dif=[]\n",
    "#length\n",
    "# i=0\n",
    "# while (i<len(a)):\n",
    "#     print(a[i:i+8])\n",
    "#     i = i + 8\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#ciphers\n",
    "j=0\n",
    "ciphers = []\n",
    "p=\"\"\n",
    "while (j<key):\n",
    "    i=j\n",
    "    p=\"\"\n",
    "    while (i<len(a)):\n",
    "        print(a[i],end=\" \")\n",
    "        p=p+a[i]\n",
    "        i = i + 8\n",
    "    j += 1\n",
    "    ciphers.append(p)\n",
    "    print(p)\n",
    "\n",
    "#frequency\n",
    "ciphers_freq = []\n",
    "for i in range(0,len(ciphers)):\n",
    "    arr = [0]*26\n",
    "    p = ciphers[i]\n",
    "    # i = 0\n",
    "    # arr = [0] * 26\n",
    "    j = 0\n",
    "    while (j < len(p)):\n",
    "        pos = (ord(p[j]) - 13) % 26\n",
    "        arr[pos] += 1\n",
    "        j += 1\n",
    "    ciphers_freq.append(arr)\n",
    "print(\"Ciphers: \")\n",
    "print(ciphers_freq)\n",
    "\n",
    "#map of fequency\n",
    "ind = []\n",
    "for i in range(0,26):\n",
    "    ind.append(i)\n",
    "print(ind)\n",
    "\n",
    "#getting in order with indices\n",
    "mp = zip(ciphers_freq[0],ind)\n",
    "mp = list(mp)\n",
    "print(sorted(mp,reverse=True))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15, 7)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mp_sorted = sorted(mp,reverse=True)\n",
    "type(mp_sorted)\n",
    "mp_sorted[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'list' object has no attribute 'plot'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-11-38b31a2a0665>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: 'list' object has no attribute 'plot'"
     ]
    }
   ],
   "source": [
    "mp.plot()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
